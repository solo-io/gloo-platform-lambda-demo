---
apiVersion: networking.gloo.solo.io/v2
kind: RouteTable
metadata:
  name: sanity
  namespace: istio-gateways
spec:
  hosts:
    - '*'
  virtualGateways:
    - name: lambda-demo-north-south-gw
      namespace: istio-gateways
      cluster: mgmt
  http:
    - name: sanity
      matchers:
        - uri:
            prefix: /sanity
      labels:
        route: sanity
      directResponse:
        status: 200
        body: "it's alive"
      # forwardTo:
      #   destinations:
      #     - ref:
      #         name: aws-provider
      #         namespace: default
      #         cluster: mgmt
      #       kind: CLOUD_PROVIDER
      #       function:
      #         logicalName: gloo-platform-lambda-demo-latest
      #         # awsLambda:
      #         #   unwrapAsApiGateway: true
# ---
# apiVersion: trafficcontrol.policy.gloo.solo.io/v2
# kind: TransformationPolicy
# metadata:
#   name: response-dejsonify
#   namespace: default
# spec:
#   applyToRoutes:
#     - route:
#         labels:
#           route: lambda
#   config:
#     # request:
#     #   addRequestMetadata: true
#     # request:
#     #   injaTemplate:
#     #     headers:
#     #       content-type:
#     #         text: "application/json"
#         # body:
#         #   text: "hi" #"{\"headers\": { {{ headers }} } }"
#     response:
#       injaTemplate:
#         headers:
#           # # this works!
#           # content-type:
#           #   text: "{{ headers.content-type }}"
#           # surprisingly this works
#           ":status":
#             text: "{{ statusCode }}"
#           # I can map a header from lambda if I know the name; 
#           #    but I really want to merge all headers from the 
#           #    JSON field "headers" into the response headers
#           # "x-special":
#           #   text: "{{ headers.x-special }}"
#         body:
#           text: "{{ body }}"
# ---
# apiVersion: networking.istio.io/v1alpha3
# kind: EnvoyFilter
# metadata:
#   name: request-lambda
#   namespace: default
# spec:
#  configPatches: 
#   - applyTo: HTTP_ROUTE
#     match:
#       context: GATEWAY
#       routeConfiguration:
#         vhost:
#           route:
#             name: lambda-aws-route.default.mgmt
#     patch:
#       operation: MERGE
#       value:
#         typedPerFilterConfig:
#           io.solo.transformation:
#             '@type': type.googleapis.com/udpa.type.v1.TypedStruct
#             typeUrl: envoy.api.v2.filter.http.RouteTransformations
#             value:
#               transformations:
#               - responseMatch:
#                   responseTransformation:
#                     transformationTemplate:
#                       headers:
#                         ":status":
#                           text: "{{ statusCode }}"
#                       body:
#                         text: "{{ body }}"
#                 stage: 2
#   - applyTo: HTTP_FILTER
#     match:
#       context: GATEWAY
#       listener:
#         filterChain:
#           filter:
#             name: envoy.filters.network.http_connection_manager
#             subFilter:
#               name: envoy.filters.http.router
#         portNumber: 8080
#     patch:
#       operation: INSERT_BEFORE
#       value:
#         name: io.solo.transformation
#         typedConfig:
#           '@type': type.googleapis.com/udpa.type.v1.TypedStruct
#           typeUrl: envoy.api.v2.filter.http.FilterTransformations
#           value:
#             stage: 2
